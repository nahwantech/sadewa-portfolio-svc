// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Company struct {
	ID             string     `json:"id"`
	CompanyName    string     `json:"companyName"`
	CompanyAddress *string    `json:"companyAddress,omitempty"`
	CreatedAt      time.Time  `json:"createdAt"`
	CreatedBy      *string    `json:"createdBy,omitempty"`
	UpdatedAt      *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy      *string    `json:"updatedBy,omitempty"`
	IsActive       bool       `json:"isActive"`
}

type CompanyConnection struct {
	Edges    []*CompanyEdge `json:"edges,omitempty"`
	PageInfo *PageInfo      `json:"pageInfo,omitempty"`
}

type CompanyEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Company `json:"node"`
}

type CompanyInput struct {
	CompanyName    string     `json:"companyName"`
	CompanyAddress *string    `json:"companyAddress,omitempty"`
	CreatedAt      time.Time  `json:"createdAt"`
	CreatedBy      *string    `json:"createdBy,omitempty"`
	UpdatedAt      *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy      *string    `json:"updatedBy,omitempty"`
	IsActive       bool       `json:"isActive"`
}

type Education struct {
	ID                 string     `json:"id"`
	FieldOfStudy       string     `json:"fieldOfStudy"`
	School             string     `json:"school"`
	Degree             string     `json:"degree"`
	StartDate          time.Time  `json:"startDate"`
	EndDate            *time.Time `json:"endDate,omitempty"`
	Grade              *string    `json:"grade,omitempty"`
	Description        *string    `json:"description,omitempty"`
	ActivitiesSocietes *string    `json:"activitiesSocietes,omitempty"`
	Skills             *string    `json:"skills,omitempty"`
	Media              *string    `json:"media,omitempty"`
	CreatedAt          time.Time  `json:"createdAt"`
	CreatedBy          *string    `json:"createdBy,omitempty"`
	UpdatedAt          *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy          *string    `json:"updatedBy,omitempty"`
	IsActive           bool       `json:"isActive"`
}

type EducationConnection struct {
	Edges    []*EducationEdge `json:"edges,omitempty"`
	PageInfo *PageInfo        `json:"pageInfo,omitempty"`
}

type EducationEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Education `json:"node"`
}

type EducationInput struct {
	FieldOfStudy       string     `json:"fieldOfStudy"`
	School             string     `json:"school"`
	Degree             string     `json:"degree"`
	StartDate          time.Time  `json:"startDate"`
	EndDate            *time.Time `json:"endDate,omitempty"`
	Grade              *string    `json:"grade,omitempty"`
	Description        *string    `json:"description,omitempty"`
	ActivitiesSocietes *string    `json:"activitiesSocietes,omitempty"`
	Skills             *string    `json:"skills,omitempty"`
	Media              *string    `json:"media,omitempty"`
	CreatedAt          time.Time  `json:"createdAt"`
	CreatedBy          *string    `json:"createdBy,omitempty"`
	UpdatedAt          *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy          *string    `json:"updatedBy,omitempty"`
	IsActive           bool       `json:"isActive"`
}

type Experience struct {
	ID             string     `json:"id"`
	JobTitle       string     `json:"jobTitle"`
	JobStartDate   time.Time  `json:"jobStartDate"`
	JobFinishDate  time.Time  `json:"jobFinishDate"`
	JobDescription *string    `json:"jobDescription,omitempty"`
	CreatedAt      time.Time  `json:"createdAt"`
	CreatedBy      *string    `json:"createdBy,omitempty"`
	UpdatedAt      *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy      *string    `json:"updatedBy,omitempty"`
	IsActive       bool       `json:"isActive"`
	CompanyName    *string    `json:"companyName,omitempty"`
	CompanyAddress *string    `json:"companyAddress,omitempty"`
}

type ExperienceConnection struct {
	Edges    []*ExperienceEdge `json:"edges"`
	PageInfo *PageInfo         `json:"pageInfo,omitempty"`
}

type ExperienceEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Experience `json:"node"`
}

type ExperienceInput struct {
	JobTitle       string    `json:"jobTitle"`
	JobStartDate   time.Time `json:"jobStartDate"`
	JobFinishDate  time.Time `json:"jobFinishDate"`
	CreatedAt      time.Time `json:"createdAt"`
	CreatedBy      *string   `json:"createdBy,omitempty"`
	IsActive       bool      `json:"isActive"`
	JobDescription *string   `json:"jobDescription,omitempty"`
}

type ExperienceOrderByInput struct {
	JobFinishDate *SortOrderExperience `json:"jobFinishDate,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Portfolio struct {
	ID              string     `json:"id"`
	Title           string     `json:"title"`
	Description     *string    `json:"description,omitempty"`
	BackendStack    *string    `json:"backendStack,omitempty"`
	FrontendStack   *string    `json:"frontendStack,omitempty"`
	DatabaseStack   *string    `json:"databaseStack,omitempty"`
	DeploymentStack *string    `json:"deploymentStack,omitempty"`
	CreatedAt       time.Time  `json:"createdAt"`
	CreatedBy       *string    `json:"createdBy,omitempty"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy       *string    `json:"updatedBy,omitempty"`
	IsActive        bool       `json:"isActive"`
	ProjectYear     *int32     `json:"projectYear,omitempty"`
}

type PortfolioConnection struct {
	Edges    []*PortfolioEdge `json:"edges"`
	PageInfo *PageInfo        `json:"pageInfo,omitempty"`
}

type PortfolioEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Portfolio `json:"node"`
}

type PortfolioInput struct {
	Title           string  `json:"title"`
	Description     *string `json:"description,omitempty"`
	BackendStack    *string `json:"backendStack,omitempty"`
	FrontendStack   *string `json:"frontendStack,omitempty"`
	DatabaseStack   *string `json:"databaseStack,omitempty"`
	DeploymentStack *string `json:"deploymentStack,omitempty"`
	CreatedBy       *string `json:"createdBy,omitempty"`
	UpdatedBy       *string `json:"updatedBy,omitempty"`
	IsActive        bool    `json:"isActive"`
	ProjectYear     *int32  `json:"projectYear,omitempty"`
}

type PortfolioOrderByInput struct {
	ProjectYear *SortOrder `json:"projectYear,omitempty"`
}

type Query struct {
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrderExperience string

const (
	SortOrderExperienceAsc  SortOrderExperience = "ASC"
	SortOrderExperienceDesc SortOrderExperience = "DESC"
)

var AllSortOrderExperience = []SortOrderExperience{
	SortOrderExperienceAsc,
	SortOrderExperienceDesc,
}

func (e SortOrderExperience) IsValid() bool {
	switch e {
	case SortOrderExperienceAsc, SortOrderExperienceDesc:
		return true
	}
	return false
}

func (e SortOrderExperience) String() string {
	return string(e)
}

func (e *SortOrderExperience) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrderExperience(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrderExperience", str)
	}
	return nil
}

func (e SortOrderExperience) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
