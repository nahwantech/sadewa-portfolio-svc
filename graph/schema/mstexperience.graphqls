scalar Time

type ExperienceConnection {
    edges: [ExperienceEdge!]!
    pageInfo: PageInfo
}

type ExperienceEdge {
    cursor: String!
    node: Experience!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
}

type Experience {
    id: ID!
    jobTitle: String!
    jobStartDate: Time!
    jobFinishDate: Time!
    jobDescription: String
    createdAt: Time!
    createdBy: String
    updatedAt: Time
    updatedBy: String
    isActive: Boolean!
    companyName: String
    companyAddress: String
    logoUrl: String
}

extend type Query {
    experience(id: ID!): Experience
    experiences(first: Int, after: String, orderBy: ExperienceOrderByInput): ExperienceConnection!
}

extend type Mutation{
    createExperience(input: ExperienceInput!): Experience!
    updateExperience(id: ID!, input: ExperienceInput!): Experience!
    deleteExperience(id: ID!): Boolean!
}

enum SortOrderExperience {
    ASC 
    DESC 
}

input ExperienceOrderByInput {
    jobFinishDate: SortOrderExperience
}


input ExperienceInput {
    jobTitle: String!
    jobStartDate: Time!
    jobFinishDate: Time!
    createdAt: Time!
    createdBy: String
    isActive: Boolean!
    jobDescription: String
}