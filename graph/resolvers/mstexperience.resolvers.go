package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"sadewa-portfolio-svc/graph/generated"
	"sadewa-portfolio-svc/graph/model"
)

// CreateExperience is the resolver for the createExperience field.
func (r *mutationResolver) CreateExperience(ctx context.Context, input model.ExperienceInput) (*model.Experience, error) {
	panic(fmt.Errorf("not implemented: CreateExperience - createExperience"))
}

// UpdateExperience is the resolver for the updateExperience field.
func (r *mutationResolver) UpdateExperience(ctx context.Context, id string, input model.ExperienceInput) (*model.Experience, error) {
	panic(fmt.Errorf("not implemented: UpdateExperience - updateExperience"))
}

// DeleteExperience is the resolver for the deleteExperience field.
func (r *mutationResolver) DeleteExperience(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteExperience - deleteExperience"))
}

// Experiences is the resolver for the experiences field.
func (r *queryResolver) Experiences(ctx context.Context) ([]*model.Experience, error) {
	panic(fmt.Errorf("not implemented: Experiences - experiences"))
}

// Experience is the resolver for the experience field.
func (r *queryResolver) Experience(ctx context.Context, id string) (*model.Experience, error) {
	panic(fmt.Errorf("not implemented: Experience - experience"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
